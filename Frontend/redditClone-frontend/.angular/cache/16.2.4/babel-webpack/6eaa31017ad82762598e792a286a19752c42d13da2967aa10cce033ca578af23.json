{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CommentService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5053/api/'; //Will change it later + the routes for the methods below\n  }\n\n  getCommentsByPost(postId) {\n    return this.http.get(`${this.apiUrl}/comment/post/${postId}/comments`);\n  }\n  addComment(newComment, postId) {\n    return this.http.post(`${this.apiUrl}/comment/post/${postId}/comment`, newComment);\n  }\n  static #_ = this.ɵfac = function CommentService_Factory(t) {\n    return new (t || CommentService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CommentService,\n    factory: CommentService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["CommentService","constructor","http","apiUrl","getCommentsByPost","postId","get","addComment","newComment","post","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\MrKing\\Desktop\\Frontend\\redditClone-frontend\\src\\app\\services\\comment.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Comment } from '../models/comment.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommentService {\n\n  private apiUrl = 'http://localhost:5053/api/'; //Will change it later + the routes for the methods below\n\n  constructor(private http: HttpClient) { }\n\n  getCommentsByPost(postId: number): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiUrl}/comment/post/${postId}/comments`);\n  }\n\n  addComment(newComment: any, postId: number): Observable<any[]> {\n    return this.http.post<any[]>(`${this.apiUrl}/comment/post/${postId}/comment`, newComment);\n  }\n/**\n  updateComment(commentId: number, updatedComment: any): Observable<any[]> {\n    return this.http.put<any[]>(`${this.apiUrl}/comment/post/${postId}/comment/${commentId}`, updatedComment);\n  }\n\n  deleteComment(commentId: number): Observable<any[]> {\n    return this.http.delete<any[]>(`${this.apiUrl}/comment/post/${postId}/${commentId}`);\n  }\n*/\n}\n"],"mappings":";;AAQA,OAAM,MAAOA,cAAc;EAIzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,4BAA4B,CAAC,CAAC;EAEP;;EAExCC,iBAAiBA,CAACC,MAAc;IAC9B,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAQ,GAAG,IAAI,CAACH,MAAM,iBAAiBE,MAAM,WAAW,CAAC;EAC/E;EAEAE,UAAUA,CAACC,UAAe,EAAEH,MAAc;IACxC,OAAO,IAAI,CAACH,IAAI,CAACO,IAAI,CAAQ,GAAG,IAAI,CAACN,MAAM,iBAAiBE,MAAM,UAAU,EAAEG,UAAU,CAAC;EAC3F;EAAC,QAAAE,CAAA,G;qBAZUV,cAAc,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdf,cAAc;IAAAgB,OAAA,EAAdhB,cAAc,CAAAiB,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}