{"ast":null,"code":"import { BehaviorSubject, map, switchMap } from 'rxjs';\nimport jwt_decode from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5296/Auth';\n    this.isAuthenticatedSubject = new BehaviorSubject(false);\n    this.isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n    this.isUser = '';\n  }\n  registerAndLogin(userRegister) {\n    return this.http.post(`${this.apiUrl}/Register`, userRegister).pipe(switchMap(registerResponse => {\n      if (registerResponse.success) {\n        const userLogin = {\n          username: userRegister.username,\n          password: userRegister.password\n        };\n        return this.login(userLogin);\n      } else {\n        throw new Error('Registration failed');\n      }\n    }));\n  }\n  login(userLogin) {\n    return this.http.post(`${this.apiUrl}/Login`, userLogin).pipe(map(response => {\n      if (response.success && response.data) {\n        localStorage.setItem('token', response.data);\n        this.isUser = this.getUsername(localStorage.getItem('token'));\n        this.isAuthenticatedSubject.next(true);\n      }\n      return response;\n    }));\n  }\n  isLoggedIn() {\n    return this.isAuthenticatedSubject.value;\n  }\n  logout() {\n    this.isAuthenticatedSubject.next(false);\n    this.isUser = '';\n    localStorage.removeItem('token');\n  }\n  getDecodedAccessToken(token) {\n    try {\n      return jwt_decode(token);\n    } catch (Error) {\n      return null;\n    }\n  }\n  getUsername(token) {\n    var tokenInfo = this.getDecodedAccessToken(token).unique_name;\n    return tokenInfo;\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","map","switchMap","jwt_decode","AuthService","constructor","http","apiUrl","isAuthenticatedSubject","isAuthenticated$","asObservable","isUser","registerAndLogin","userRegister","post","pipe","registerResponse","success","userLogin","username","password","login","Error","response","data","localStorage","setItem","getUsername","getItem","next","isLoggedIn","value","logout","removeItem","getDecodedAccessToken","token","tokenInfo","unique_name","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\MrKing\\Desktop\\Frontend\\redditClone-frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, map, switchMap } from 'rxjs';\nimport { ServiceResponse } from './service-response.service';\nimport { ChangeDetectorRef } from '@angular/core';\nimport jwt_decode from 'jwt-decode';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:5296/Auth';\n\n  private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);\n  isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n  isUser = '';\n  \n  constructor(private http: HttpClient) { }\n\n  registerAndLogin(userRegister: any): Observable<ServiceResponse<any>> {\n    return this.http.post<ServiceResponse<any>>(`${this.apiUrl}/Register`, userRegister)\n      .pipe(\n        switchMap(registerResponse => {\n          if (registerResponse.success) {\n            const userLogin: any = {\n              username: userRegister.username,\n              password: userRegister.password\n            };\n            return this.login(userLogin);\n          } else {\n            throw new Error('Registration failed');\n          }\n        })\n      );\n  }\n\n  login(userLogin: any): Observable<ServiceResponse<string>> {\n    return this.http.post<ServiceResponse<string>>(`${this.apiUrl}/Login`, userLogin).pipe(\n      map(response => {\n        if (response.success && response.data) {\n          localStorage.setItem('token', response.data);\n          this.isUser= this.getUsername(localStorage.getItem('token'));\n          this.isAuthenticatedSubject.next(true);\n        }\n        return response;\n      })\n    );\n  }\n\n  public isLoggedIn() {\n    return this.isAuthenticatedSubject.value;\n  }\n\n  logout(): void {\n    this.isAuthenticatedSubject.next(false);\n    this.isUser= '';\n    localStorage.removeItem('token');\n  }\n\n  getDecodedAccessToken(token: string): any {\n    try {\n      return jwt_decode(token);\n    } catch(Error) {\n      return null;\n    }\n  }\n\n  public getUsername(token: any): any {\n      var tokenInfo = this.getDecodedAccessToken(token).unique_name;\n      return tokenInfo;\n  }\n}\n"],"mappings":"AAEA,SAASA,eAAe,EAAcC,GAAG,EAAEC,SAAS,QAAQ,MAAM;AAGlE,OAAOC,UAAU,MAAM,YAAY;;;AAKnC,OAAM,MAAOC,WAAW;EAOtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IANhB,KAAAC,MAAM,GAAG,4BAA4B;IAErC,KAAAC,sBAAsB,GAAG,IAAIR,eAAe,CAAU,KAAK,CAAC;IACpE,KAAAS,gBAAgB,GAAG,IAAI,CAACD,sBAAsB,CAACE,YAAY,EAAE;IAC7D,KAAAC,MAAM,GAAG,EAAE;EAE6B;EAExCC,gBAAgBA,CAACC,YAAiB;IAChC,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAuB,GAAG,IAAI,CAACP,MAAM,WAAW,EAAEM,YAAY,CAAC,CACjFE,IAAI,CACHb,SAAS,CAACc,gBAAgB,IAAG;MAC3B,IAAIA,gBAAgB,CAACC,OAAO,EAAE;QAC5B,MAAMC,SAAS,GAAQ;UACrBC,QAAQ,EAAEN,YAAY,CAACM,QAAQ;UAC/BC,QAAQ,EAAEP,YAAY,CAACO;SACxB;QACD,OAAO,IAAI,CAACC,KAAK,CAACH,SAAS,CAAC;OAC7B,MAAM;QACL,MAAM,IAAII,KAAK,CAAC,qBAAqB,CAAC;;IAE1C,CAAC,CAAC,CACH;EACL;EAEAD,KAAKA,CAACH,SAAc;IAClB,OAAO,IAAI,CAACZ,IAAI,CAACQ,IAAI,CAA0B,GAAG,IAAI,CAACP,MAAM,QAAQ,EAAEW,SAAS,CAAC,CAACH,IAAI,CACpFd,GAAG,CAACsB,QAAQ,IAAG;MACb,IAAIA,QAAQ,CAACN,OAAO,IAAIM,QAAQ,CAACC,IAAI,EAAE;QACrCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,QAAQ,CAACC,IAAI,CAAC;QAC5C,IAAI,CAACb,MAAM,GAAE,IAAI,CAACgB,WAAW,CAACF,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC,CAAC;QAC5D,IAAI,CAACpB,sBAAsB,CAACqB,IAAI,CAAC,IAAI,CAAC;;MAExC,OAAON,QAAQ;IACjB,CAAC,CAAC,CACH;EACH;EAEOO,UAAUA,CAAA;IACf,OAAO,IAAI,CAACtB,sBAAsB,CAACuB,KAAK;EAC1C;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAACxB,sBAAsB,CAACqB,IAAI,CAAC,KAAK,CAAC;IACvC,IAAI,CAAClB,MAAM,GAAE,EAAE;IACfc,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;EAClC;EAEAC,qBAAqBA,CAACC,KAAa;IACjC,IAAI;MACF,OAAOhC,UAAU,CAACgC,KAAK,CAAC;KACzB,CAAC,OAAMb,KAAK,EAAE;MACb,OAAO,IAAI;;EAEf;EAEOK,WAAWA,CAACQ,KAAU;IACzB,IAAIC,SAAS,GAAG,IAAI,CAACF,qBAAqB,CAACC,KAAK,CAAC,CAACE,WAAW;IAC7D,OAAOD,SAAS;EACpB;EAAC,QAAAE,CAAA,G;qBA5DUlC,WAAW,EAAAmC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXvC,WAAW;IAAAwC,OAAA,EAAXxC,WAAW,CAAAyC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}