{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CommentService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5296/Comment'; //Will change it later + the routes for the methods below\n  }\n\n  getCommentsByPost(postId) {\n    return this.http.get(`${this.apiUrl}/post/${postId}/comments`);\n  }\n  addComment(newComment, postId) {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      Authorization: `bearer ${token}`\n    });\n    return this.http.post(`${this.apiUrl}/comment/post/${postId}/comment`, newComment);\n  }\n  updateComment(postId, commentId, updatedComment) {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      Authorization: `bearer ${token}`\n    });\n    return this.http.put(`${this.apiUrl}/comment/post/${postId}/comment/${commentId}`, updatedComment);\n  }\n  deleteComment(postId, commentId) {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      Authorization: `bearer ${token}`\n    });\n    return this.http.delete(`${this.apiUrl}/comment/post/${postId}/${commentId}`);\n  }\n  static #_ = this.ɵfac = function CommentService_Factory(t) {\n    return new (t || CommentService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CommentService,\n    factory: CommentService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","CommentService","constructor","http","apiUrl","getCommentsByPost","postId","get","addComment","newComment","token","localStorage","getItem","headers","Authorization","post","updateComment","commentId","updatedComment","put","deleteComment","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\MrKing\\Desktop\\Frontend\\redditClone-frontend\\src\\app\\services\\comment.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Comment } from '../models/comment.model';\nimport { ServiceResponse } from './service-response.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommentService {\n\n  private apiUrl = 'http://localhost:5296/Comment'; //Will change it later + the routes for the methods below\n\n  constructor(private http: HttpClient) { }\n\n  getCommentsByPost(postId: number): Observable<ServiceResponse<any[]>> {\n    return this.http.get<ServiceResponse<any[]>>(`${this.apiUrl}/post/${postId}/comments`);\n  }\n\n  addComment(newComment: any, postId: number): Observable<any[]> {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      Authorization: `bearer ${token}`\n    });\n    return this.http.post<any[]>(`${this.apiUrl}/comment/post/${postId}/comment`, newComment);\n  }\n\n  updateComment(postId: number, commentId: number, updatedComment: any): Observable<any[]> {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      Authorization: `bearer ${token}`\n    });\n    return this.http.put<any[]>(`${this.apiUrl}/comment/post/${postId}/comment/${commentId}`, updatedComment);\n  }\n\n  deleteComment(postId: number, commentId: number): Observable<any[]> {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      Authorization: `bearer ${token}`\n    });\n    return this.http.delete<any[]>(`${this.apiUrl}/comment/post/${postId}/${commentId}`);\n  }\n\n}\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAQ9D,OAAM,MAAOC,cAAc;EAIzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,+BAA+B,CAAC,CAAC;EAEV;;EAExCC,iBAAiBA,CAACC,MAAc;IAC9B,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAyB,GAAG,IAAI,CAACH,MAAM,SAASE,MAAM,WAAW,CAAC;EACxF;EAEAE,UAAUA,CAACC,UAAe,EAAEH,MAAc;IACxC,MAAMI,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,OAAO,GAAG,IAAIb,WAAW,CAAC;MAC9Bc,aAAa,EAAE,UAAUJ,KAAK;KAC/B,CAAC;IACF,OAAO,IAAI,CAACP,IAAI,CAACY,IAAI,CAAQ,GAAG,IAAI,CAACX,MAAM,iBAAiBE,MAAM,UAAU,EAAEG,UAAU,CAAC;EAC3F;EAEAO,aAAaA,CAACV,MAAc,EAAEW,SAAiB,EAAEC,cAAmB;IAClE,MAAMR,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,OAAO,GAAG,IAAIb,WAAW,CAAC;MAC9Bc,aAAa,EAAE,UAAUJ,KAAK;KAC/B,CAAC;IACF,OAAO,IAAI,CAACP,IAAI,CAACgB,GAAG,CAAQ,GAAG,IAAI,CAACf,MAAM,iBAAiBE,MAAM,YAAYW,SAAS,EAAE,EAAEC,cAAc,CAAC;EAC3G;EAEAE,aAAaA,CAACd,MAAc,EAAEW,SAAiB;IAC7C,MAAMP,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,OAAO,GAAG,IAAIb,WAAW,CAAC;MAC9Bc,aAAa,EAAE,UAAUJ,KAAK;KAC/B,CAAC;IACF,OAAO,IAAI,CAACP,IAAI,CAACkB,MAAM,CAAQ,GAAG,IAAI,CAACjB,MAAM,iBAAiBE,MAAM,IAAIW,SAAS,EAAE,CAAC;EACtF;EAAC,QAAAK,CAAA,G;qBAhCUrB,cAAc,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAd1B,cAAc;IAAA2B,OAAA,EAAd3B,cAAc,CAAA4B,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}