{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CommentService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5000/api/comments'; //Will change it later + the routes for the methods below\n  }\n\n  getCommentsByPost(postId) {\n    return this.http.get(`${this.apiUrl}?postId=${postId}`);\n  }\n  addComment(newComment) {\n    return this.http.post(this.apiUrl, newComment);\n  }\n  updateComment(updatedComment) {\n    return this.http.put(`${this.apiUrl}/${updatedComment.id}`, updatedComment);\n  }\n  deleteComment(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  static #_ = this.ɵfac = function CommentService_Factory(t) {\n    return new (t || CommentService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CommentService,\n    factory: CommentService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["CommentService","constructor","http","apiUrl","getCommentsByPost","postId","get","addComment","newComment","post","updateComment","updatedComment","put","id","deleteComment","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\MrKing\\Desktop\\Frontend\\redditClone-frontend\\src\\app\\services\\comment.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Comment } from '../models/comment.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommentService {\n\n  private apiUrl = 'http://localhost:5000/api/comments'; //Will change it later + the routes for the methods below\n\n  constructor(private http: HttpClient) { }\n\n  getCommentsByPost(postId: number): Observable<Comment[]> {\n    return this.http.get<Comment[]>(`${this.apiUrl}?postId=${postId}`);\n  }\n\n  addComment(newComment: Comment): Observable<Comment> {\n    return this.http.post<Comment>(this.apiUrl, newComment);\n  }\n\n  updateComment(updatedComment: Comment): Observable<Comment> {\n    return this.http.put<Comment>(`${this.apiUrl}/${updatedComment.id}`, updatedComment);\n  }\n\n  deleteComment(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\n  }\n}\n"],"mappings":";;AAQA,OAAM,MAAOA,cAAc;EAIzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,oCAAoC,CAAC,CAAC;EAEf;;EAExCC,iBAAiBA,CAACC,MAAc;IAC9B,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAY,GAAG,IAAI,CAACH,MAAM,WAAWE,MAAM,EAAE,CAAC;EACpE;EAEAE,UAAUA,CAACC,UAAmB;IAC5B,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAU,IAAI,CAACN,MAAM,EAAEK,UAAU,CAAC;EACzD;EAEAE,aAAaA,CAACC,cAAuB;IACnC,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAAU,GAAG,IAAI,CAACT,MAAM,IAAIQ,cAAc,CAACE,EAAE,EAAE,EAAEF,cAAc,CAAC;EACtF;EAEAG,aAAaA,CAACD,EAAU;IACtB,OAAO,IAAI,CAACX,IAAI,CAACa,MAAM,CAAO,GAAG,IAAI,CAACZ,MAAM,IAAIU,EAAE,EAAE,CAAC;EACvD;EAAC,QAAAG,CAAA,G;qBApBUhB,cAAc,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdrB,cAAc;IAAAsB,OAAA,EAAdtB,cAAc,CAAAuB,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}