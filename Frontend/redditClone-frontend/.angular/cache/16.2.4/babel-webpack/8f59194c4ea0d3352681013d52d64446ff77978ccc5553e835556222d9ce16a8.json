{"ast":null,"code":"import { switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5296/Auth';\n  }\n  registerAndLogin(userRegister) {\n    return this.http.post(`${this.apiUrl}/Register`, userRegister).pipe(switchMap(registerResponse => {\n      if (registerResponse.success) {\n        const userLogin = {\n          username: userRegister.username,\n          password: userRegister.password\n        };\n        console.log(userLogin);\n        return this.login(userLogin);\n      } else {\n        throw new Error('Registration failed');\n      }\n    }));\n  }\n  login(userLogin) {\n    return this.http.post(`${this.apiUrl}/Login`, userLogin);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["switchMap","AuthService","constructor","http","apiUrl","registerAndLogin","userRegister","post","pipe","registerResponse","success","userLogin","username","password","console","log","login","Error","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\MrKing\\Desktop\\Frontend\\redditClone-frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, switchMap } from 'rxjs';\nimport { ServiceResponse } from './service-response.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:5296/Auth';\n\n  constructor(private http: HttpClient) { }\n\n  registerAndLogin(userRegister: any): Observable<ServiceResponse<any>> {\n    return this.http.post<ServiceResponse<any>>(`${this.apiUrl}/Register`, userRegister)\n      .pipe(\n        switchMap(registerResponse => {\n          if (registerResponse.success) {\n            const userLogin: any = {\n              username: userRegister.username,\n              password: userRegister.password\n            };\n            console.log(userLogin);\n            return this.login(userLogin);\n          } else {\n            throw new Error('Registration failed');\n          }\n        })\n      );\n  }\n\n  login(userLogin: any): Observable<ServiceResponse<any>> {\n    return this.http.post<ServiceResponse<any>>(`${this.apiUrl}/Login`, userLogin);\n  }\n  \n}\n"],"mappings":"AAEA,SAAqBA,SAAS,QAAQ,MAAM;;;AAM5C,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,4BAA4B;EAEL;EAExCC,gBAAgBA,CAACC,YAAiB;IAChC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAuB,GAAG,IAAI,CAACH,MAAM,WAAW,EAAEE,YAAY,CAAC,CACjFE,IAAI,CACHR,SAAS,CAACS,gBAAgB,IAAG;MAC3B,IAAIA,gBAAgB,CAACC,OAAO,EAAE;QAC5B,MAAMC,SAAS,GAAQ;UACrBC,QAAQ,EAAEN,YAAY,CAACM,QAAQ;UAC/BC,QAAQ,EAAEP,YAAY,CAACO;SACxB;QACDC,OAAO,CAACC,GAAG,CAACJ,SAAS,CAAC;QACtB,OAAO,IAAI,CAACK,KAAK,CAACL,SAAS,CAAC;OAC7B,MAAM;QACL,MAAM,IAAIM,KAAK,CAAC,qBAAqB,CAAC;;IAE1C,CAAC,CAAC,CACH;EACL;EAEAD,KAAKA,CAACL,SAAc;IAClB,OAAO,IAAI,CAACR,IAAI,CAACI,IAAI,CAAuB,GAAG,IAAI,CAACH,MAAM,QAAQ,EAAEO,SAAS,CAAC;EAChF;EAAC,QAAAO,CAAA,G;qBAzBUjB,WAAW,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXtB,WAAW;IAAAuB,OAAA,EAAXvB,WAAW,CAAAwB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}