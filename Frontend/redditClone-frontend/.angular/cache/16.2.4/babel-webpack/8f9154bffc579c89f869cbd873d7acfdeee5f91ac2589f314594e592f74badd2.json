{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { catchError, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../services/auth.service\";\nimport * as i3 from \"@angular/router\";\nexport class RegisterComponent {\n  constructor(fb, authService, router) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.registerForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]]\n    });\n  }\n  onSubmit() {\n    if (this.registerForm.invalid) {\n      return;\n    }\n    const username = this.registerForm.get('username').value;\n    const password = this.registerForm.get('password').value;\n    const email = this.registerForm.get('email').value;\n    const userRegister = {\n      username,\n      password,\n      email\n    };\n    this.authService.registerAndLogin(userRegister).pipe(catchError(error => {\n      this.errorMessage = error.message;\n      return of(null);\n    })).subscribe(response => {\n      if (response && response.success) {\n        this.router.navigate(['/posts']);\n      }\n    });\n  }\n  static #_ = this.ɵfac = function RegisterComponent_Factory(t) {\n    return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RegisterComponent,\n    selectors: [[\"app-register\"]],\n    decls: 2,\n    vars: 0,\n    template: function RegisterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"register works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","catchError","of","RegisterComponent","constructor","fb","authService","router","registerForm","group","username","required","password","email","onSubmit","invalid","get","value","userRegister","registerAndLogin","pipe","error","errorMessage","message","subscribe","response","success","navigate","_","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","AuthService","i3","Router","_2","selectors","decls","vars","template","RegisterComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\Users\\MrKing\\Desktop\\Frontend\\redditClone-frontend\\src\\app\\register\\register.component.ts","C:\\Users\\MrKing\\Desktop\\Frontend\\redditClone-frontend\\src\\app\\register\\register.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from '../services/auth.service';\nimport { Router } from '@angular/router';\nimport { ServiceResponse } from '../services/service-response.service';\nimport { catchError, of } from 'rxjs';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n  registerForm: FormGroup;\n  errorMessage: string;\n\n  constructor(private fb: FormBuilder, private authService: AuthService, private router: Router) {\n    this.registerForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]]\n    });\n  }\n\n  onSubmit() {\n    if (this.registerForm.invalid) {\n      return;\n    }\n\n    const username = this.registerForm.get('username').value;\n    const password = this.registerForm.get('password').value;\n    const email = this.registerForm.get('email').value;\n\n    const userRegister = { username, password, email };\n\n    this.authService.registerAndLogin(userRegister)\n      .pipe(\n        catchError((error) => {\n          this.errorMessage = error.message;\n          return of(null);\n        })\n      )\n      .subscribe(\n        (response: ServiceResponse<any>) => {\n          if (response && response.success) {\n            this.router.navigate(['/posts']);\n          }\n        }\n      );\n  }\n}\n","<p>register works!</p>\n"],"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;AAInE,SAASC,UAAU,EAAEC,EAAE,QAAQ,MAAM;;;;;AAOrC,OAAM,MAAOC,iBAAiB;EAI5BC,YAAoBC,EAAe,EAAUC,WAAwB,EAAUC,MAAc;IAAzE,KAAAF,EAAE,GAAFA,EAAE;IAAuB,KAAAC,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;IACnF,IAAI,CAACC,YAAY,GAAG,IAAI,CAACH,EAAE,CAACI,KAAK,CAAC;MAChCC,QAAQ,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACW,QAAQ,CAAC;MACnCC,QAAQ,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACW,QAAQ,CAAC;MACnCE,KAAK,EAAE,CAAC,EAAE,EAAE,CAACb,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACa,KAAK,CAAC;KACpD,CAAC;EACJ;EAEAC,QAAQA,CAAA;IACN,IAAI,IAAI,CAACN,YAAY,CAACO,OAAO,EAAE;MAC7B;;IAGF,MAAML,QAAQ,GAAG,IAAI,CAACF,YAAY,CAACQ,GAAG,CAAC,UAAU,CAAC,CAACC,KAAK;IACxD,MAAML,QAAQ,GAAG,IAAI,CAACJ,YAAY,CAACQ,GAAG,CAAC,UAAU,CAAC,CAACC,KAAK;IACxD,MAAMJ,KAAK,GAAG,IAAI,CAACL,YAAY,CAACQ,GAAG,CAAC,OAAO,CAAC,CAACC,KAAK;IAElD,MAAMC,YAAY,GAAG;MAAER,QAAQ;MAAEE,QAAQ;MAAEC;IAAK,CAAE;IAElD,IAAI,CAACP,WAAW,CAACa,gBAAgB,CAACD,YAAY,CAAC,CAC5CE,IAAI,CACHnB,UAAU,CAAEoB,KAAK,IAAI;MACnB,IAAI,CAACC,YAAY,GAAGD,KAAK,CAACE,OAAO;MACjC,OAAOrB,EAAE,CAAC,IAAI,CAAC;IACjB,CAAC,CAAC,CACH,CACAsB,SAAS,CACPC,QAA8B,IAAI;MACjC,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,EAAE;QAChC,IAAI,CAACnB,MAAM,CAACoB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;IAEpC,CAAC,CACF;EACL;EAAC,QAAAC,CAAA,G;qBArCUzB,iBAAiB,EAAA0B,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,WAAA,GAAAL,EAAA,CAAAC,iBAAA,CAAAK,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAjBlC,iBAAiB;IAAAmC,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,QAAA,WAAAC,2BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCZ9Bd,EAAA,CAAAgB,cAAA,QAAG;QAAAhB,EAAA,CAAAiB,MAAA,sBAAe;QAAAjB,EAAA,CAAAkB,YAAA,EAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}