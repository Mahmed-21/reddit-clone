{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PostService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5296/Post'; //Will change it later + the routes for the methods below\n  }\n\n  getPosts() {\n    return this.http.get(`${this.apiUrl}/posts`);\n  }\n  getPost(postId) {\n    console.log(`Fetching post with ID: ${postId}`);\n    return this.http.get(`${this.apiUrl}/posts/${postId}`);\n  }\n  addPost(newPost) {\n    return this.http.post(`${this.apiUrl}/post`, newPost);\n  }\n  updatePost(postId, updatedPost) {\n    return this.http.put(`${this.apiUrl}/post/${postId}`, updatedPost);\n  }\n  deletePost(postId) {\n    return this.http.delete(`${this.apiUrl}/post/${postId}`);\n  }\n  static #_ = this.ɵfac = function PostService_Factory(t) {\n    return new (t || PostService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostService,\n    factory: PostService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["PostService","constructor","http","apiUrl","getPosts","get","getPost","postId","console","log","addPost","newPost","post","updatePost","updatedPost","put","deletePost","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\MrKing\\Desktop\\Frontend\\redditClone-frontend\\src\\app\\services\\post.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { ServiceResponse } from './service-response.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostService {\n  private apiUrl = 'http://localhost:5296/Post'; //Will change it later + the routes for the methods below\n  constructor(private http: HttpClient) { }\n\n  getPosts(): Observable<ServiceResponse<any[]>> {\n    return this.http.get<ServiceResponse<any[]>>(`${this.apiUrl}/posts`);\n  }\n\n  getPost(postId: number): Observable<any> {\n    console.log(`Fetching post with ID: ${postId}`);\n    return this.http.get<any>(`${this.apiUrl}/posts/${postId}`);\n  }\n\n  addPost(newPost: any): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/post`, newPost);\n  }\n\n  updatePost(postId: number, updatedPost: any): Observable<any> {\n    return this.http.put<any>(`${this.apiUrl}/post/${postId}`, updatedPost);\n  }\n\n  deletePost(postId: number): Observable<any> {\n    return this.http.delete<any>(`${this.apiUrl}/post/${postId}`);\n  }\n}\n"],"mappings":";;AAQA,OAAM,MAAOA,WAAW;EAEtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IADhB,KAAAC,MAAM,GAAG,4BAA4B,CAAC,CAAC;EACP;;EAExCC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAyB,GAAG,IAAI,CAACF,MAAM,QAAQ,CAAC;EACtE;EAEAG,OAAOA,CAACC,MAAc;IACpBC,OAAO,CAACC,GAAG,CAAC,0BAA0BF,MAAM,EAAE,CAAC;IAC/C,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAM,GAAG,IAAI,CAACF,MAAM,UAAUI,MAAM,EAAE,CAAC;EAC7D;EAEAG,OAAOA,CAACC,OAAY;IAClB,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAM,GAAG,IAAI,CAACT,MAAM,OAAO,EAAEQ,OAAO,CAAC;EAC5D;EAEAE,UAAUA,CAACN,MAAc,EAAEO,WAAgB;IACzC,OAAO,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAM,GAAG,IAAI,CAACZ,MAAM,SAASI,MAAM,EAAE,EAAEO,WAAW,CAAC;EACzE;EAEAE,UAAUA,CAACT,MAAc;IACvB,OAAO,IAAI,CAACL,IAAI,CAACe,MAAM,CAAM,GAAG,IAAI,CAACd,MAAM,SAASI,MAAM,EAAE,CAAC;EAC/D;EAAC,QAAAW,CAAA,G;qBAvBUlB,WAAW,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXvB,WAAW;IAAAwB,OAAA,EAAXxB,WAAW,CAAAyB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}